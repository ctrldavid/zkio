// Generated by CoffeeScript 1.3.3
(function() {
  var Visualisation;

  Visualisation = (function() {

    function Visualisation() {
      this.map = new Map();
      this.width = window.innerWidth - 8;
      this.height = window.innerHeight - 8;
      this.canvas = new Canvas(this.width, this.height);
      this.canvas.center();
      this.lastUpdate = Date.now();
    }

    Visualisation.prototype.placeObstacles = function() {
      var x, _i, _results;
      _results = [];
      for (x = _i = 0; _i <= 400; x = ++_i) {
        _results.push(this.map.genObs());
      }
      return _results;
    };

    Visualisation.prototype.draw = function() {
      var edge, node, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results;
      _ref = this.map.graph.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        this.canvas.basePlateBorder(node.x, node.y, node.type);
      }
      _ref1 = this.map.graph.nodes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        node = _ref1[_j];
        this.canvas.basePlate(node.x, node.y, node.type);
      }
      _ref2 = this.map.graph.edges;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        edge = _ref2[_k];
        this.canvas.line(edge.start.x, edge.start.y, edge.end.x, edge.end.y, edge.start.type === edge.end.type ? Colour[edge.start.type] : Colour.Path, edge.start.type === edge.end.type ? 2 : 1);
      }
      _ref3 = this.map.graph.nodes;
      _results = [];
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        node = _ref3[_l];
        _results.push(this.canvas.circle(node.x, node.y, Colour[node.type], {
          Town: 3,
          Route: 1.5,
          Instance: 2,
          Obstacle: 0
        }[node.type]));
      }
      return _results;
    };

    Visualisation.prototype.voronoi = function() {
      var bbox, c, cell, ctx, edge, halfedge, points, result, voronoi, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      voronoi = new Voronoi();
      bbox = {
        xl: 0,
        xr: this.width,
        yt: 0,
        yb: this.height
      };
      bbox = {
        xl: -this.width,
        xr: this.width,
        yt: -this.height,
        yb: this.height
      };
      points = this.map.graph.nodes.map(function(node) {
        return {
          x: node.x,
          y: node.y,
          t: node.type,
          v: 1 - node.tries / 50
        };
      });
      result = voronoi.compute(points, bbox);
      ctx = this.canvas.ctx;
      _ref = result.cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        c = Colour[cell.site.t];
        c.a = 0.1 + 0.1 * cell.site.v.toFixed(2);
        ctx.fillStyle = c.rgba();
        c.a = 1.0;
        ctx.beginPath();
        ctx.moveTo(cell.halfedges[0].getStartpoint().x, cell.halfedges[0].getStartpoint().y);
        _ref1 = cell.halfedges;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          halfedge = _ref1[_j];
          ctx.lineTo(halfedge.getEndpoint().x, halfedge.getEndpoint().y);
        }
        ctx.closePath();
        ctx.fill();
      }
      ctx.strokeStyle = "rgba(255,255,255,0.05)";
      _ref2 = result.edges;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        edge = _ref2[_k];
        ctx.beginPath();
        ctx.moveTo(edge.va.x, edge.va.y);
        ctx.lineTo(edge.vb.x, edge.vb.y);
        if (edge.lSite.t !== edge.rSite.t) {
          _results.push(ctx.stroke());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Visualisation.prototype.gen = function() {
      this.map.gen1();
      if (Date.now() - this.lastUpdate > 3000) {
        this.lastUpdate = Date.now();
        this.canvas.clear();
        this.draw();
        return this.voronoi();
      }
    };

    return Visualisation;

  })();

  window.Visualisation = Visualisation;

}).call(this);
